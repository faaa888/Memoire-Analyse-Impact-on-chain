#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import subprocess

"""
Script d'ex√©cution compl√®te du pipeline d'analyse d'impact des sorties de fonds
avec d√©corr√©lation BTC et g√©n√©ration du tableau final des m√©dianes.
"""

def main():
    start_time = time.time()
    
    print("=========================================================")
    print("    PIPELINE D'ANALYSE D'IMPACT DES SORTIES DE FONDS")
    print("=========================================================")
    
    # √âtape 0: Traitement des m√©triques de projet pour cr√©er resume_impact.csv
    print("\nüìä √âTAPE 0: Traitement des m√©triques de projets")
    print("-------------------------------")
    try:
        subprocess.run([sys.executable, "process_project_metrics.py"], check=True)
        print("‚úÖ Traitement des m√©triques termin√©")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du traitement des m√©triques: {e}")
        return
    
    # √âtape 1: Analyse simple des impacts et corr√©lations BTC
    print("\nüìà √âTAPE 1: Analyse des impacts et corr√©lations BTC")
    print("-------------------------------")
    try:
        subprocess.run([sys.executable, "analyse_simple_btc.py"], check=True)
        print("‚úÖ Analyse des impacts et corr√©lations BTC termin√©e")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'analyse des impacts: {e}")
        return
    
    # √âtape 2: D√©corr√©lation et analyse finale
    print("\nüîÑ √âTAPE 2: D√©corr√©lation et analyse finale")
    print("-------------------------------")
    try:
        subprocess.run([sys.executable, "analyse_impact_decorrelation_btc.py"], check=True)
        print("‚úÖ D√©corr√©lation et analyse finale termin√©es")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la d√©corr√©lation: {e}")
        return
    
    # √âtape 3: G√©n√©ration du tableau final avec m√©dianes et graphique comparatif
    print("\nüìã √âTAPE 3: G√©n√©ration du tableau final et graphique comparatif")
    print("-------------------------------")
    try:
        subprocess.run([sys.executable, "generate_tableau_final_medianes.py"], check=True)
        print("‚úÖ Tableau final et graphique comparatif g√©n√©r√©s")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du tableau final: {e}")
        return
    
    # Calcul du temps d'ex√©cution
    end_time = time.time()
    execution_time = end_time - start_time
    minutes = int(execution_time // 60)
    seconds = int(execution_time % 60)
    
    print("\n" + "="*60)
    print(f"    ‚úÖ PIPELINE TERMIN√â EN {minutes} MIN {seconds} SEC")
    print("="*60)
    
    print("\nFichiers g√©n√©r√©s:")
    print("  - FinancialResults/Outputs/AnalyseSimple/resume_impact.csv")
    print("  - FinancialResults/Outputs/AnalyseBTC/correlations_btc.csv")
    print("  - FinancialResults/Outputs/AnalyseDecorelation/impact_decorrel√©.csv")
    print("  - FinancialResults/Outputs/AnalyseDecorelation/changements_direction.csv")
    print("  - FinancialResults/Outputs/AnalyseDecorelation/tableau_final_medianes_perennite.csv")
    
    print("\nVisualisations g√©n√©r√©es:")
    print("  - VisualsOutput/comparaison_moyenne_vs_mediane.png")
    
    print("\nüéØ R√âSULTAT PRINCIPAL:")
    print("  üìä Tableau des m√©dianes des 15 m√©triques de p√©rennit√© disponible dans:")
    print("      FinancialResults/Outputs/AnalyseDecorelation/tableau_final_medianes_perennite.csv")
    print("  üìà Graphique comparatif moyenne vs m√©diane disponible dans:")
    print("      VisualsOutput/comparaison_moyenne_vs_mediane.png")

if __name__ == "__main__":
    main() 